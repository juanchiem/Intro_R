{
  "hash": "371db39f84700e9a986ee9ba698f82b8",
  "result": {
    "markdown": "# Sintaxis\n\n\n\n\n\n## R Calculadora {.unnumbered}\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-2_6f8af55daf68c05572d9cc4d18ff576b'}\n\n```{.r .cell-code}\n4 + 9\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13\n```\n:::\n\n```{.r .cell-code}\n4 - \n  3 *\n  1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n# 4%1\n```\n:::\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-3_2aa1a8d3c729670dfc6e5479d024c0c4'}\n\n```{.r .cell-code}\n(4 + 5 ) * 7 - (36/18)^3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n:::\n\n\n[Tablas resumen](#tablas_resumen) de operadores aritméticos y lógicos (al final del capítulo)\n\nReto matemático que se volvió viral en las redes sociales\n\n![](fig_1/reto.jpeg)\n\nExisten dos soluciones, según [método](https://en.wikipedia.org/wiki/Order_of_operations#:~:text=5-,Mnemonics,-%5Bedit%5D) que se aplique:\n\nPEMDAS = 1\n\nParéntesis \\< Exponentes \\< **Multiplicación** \\< **División** \\< Adición \\< Sustracción\n\nBODMAS = 16\n\n\"Brackets\" - paréntesis/llaves \\< \"Orders\" (potencias y raíces) \\< **División** \\< **Multiplicación** \\< Adición \\< Sustracción\n\n::: callout-note\n## Challenge\nCómo opera R?\n:::\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-4_77266640a7b738b1bae4d3483603b26f'}\n\n```{.r .cell-code}\n8/2*(2+2)  \n(8/2)*(2+2) # PEMDAS !!!\n8/(2*(2+2)) # BODMAS \n```\n:::\n\nEstilos de programación. Se puede decir que hay diferencia de estilos al programar: algunos adoptan sintaxis mas compacta y otros con mayor espaciamiento. Lo importante a tener en cuenta es que nuestros códigos deberían ser facilmente interpretados por otros.\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-5_3ce87e5c66fa2b9fcd32afa8f7a2f1e8'}\n\n```{.r .cell-code}\n(3+(5*(2^2)))   # difícil de leer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23\n```\n:::\n\n```{.r .cell-code}\n3 + 5 * 2 ^ 2   # si se recuerdan las reglas, todo bien\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23\n```\n:::\n\n```{.r .cell-code}\n3 + 5 * (2 ^ 2) # si se olvidan algunas reglas, esto podría ayudar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23\n```\n:::\n:::\n\n\n## Comparaciones lógicas {.unnumbered}\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-6_ad87c68c42f736158917dd778b4d7a3d'}\n\n```{.r .cell-code}\n4 > 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n4 == 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n4 != 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n4 != 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n1 >= -9\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n::: callout-note\n## Challenge\nRevise la [Tablas resumen](#tablas_resumen) \n\nQué concluye sobre la siguiente expresión?\n\n5 + 3 * 10 %/% == 15\n\nAgregue parentesis para obtener un resultado contrario al anterior\n:::\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-7_5d5866e936f5aa624493f748623687d5'}\n\n```{.r .cell-code}\n5 + 3 * 10 %/% 3 == 15\n5 + (3 * 10) %/% 3 == 15\n```\n:::\n\n## Variables y asignaciones {.unnumbered}\n\nPodemos almacenar valores en variables usando el operador de asignación `<-`, veamos un ejemplo:\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-8_4d410c81849083246ff8cb1432ded835'}\n\n```{.r .cell-code}\nx <- 1/40\n```\n:::\n\n\nEsta asignación no muestra el valor, sino que lo almacena para más adelante en algo llamado \"variable\". Que contiene x?\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-9_823a38db29b83522bd12ace43fb8cbfb'}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.025\n```\n:::\n:::\n\n\n::: callout-tip\n## Shortcuts - atajos\n\nCtrl + r ....... run code\n\nAlt - ...... \\<-\n\nCtrl + Alt + i ...... insert chunk\n:::\n\nChequear la pestaña *Environment* en uno de los paneles de RStudio. Nuestra variable x se puede usar en lugar de un número en cualquier cálculo que espere un número:\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-10_af9f7e4e53000f526436294ab2703a2a'}\n\n```{.r .cell-code}\nx <- x + 1 # observen cómo RStudio actualiza/sobrescribe x en la pestaña superior derecha\ny <- x * 2\n```\n:::\n\n\nEl lado derecho de la asignación puede ser cualquier expresión de R válida. La expresión del lado derecho se evalúa por completo antes de que se realice la asignación.\n\nTambién es posible utilizar el operador = para la asignación\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-11_2120ada133f0a86dc7ec8dd9b491cd3b'}\n\n```{.r .cell-code}\nx = 1/40\n```\n:::\n\n\nEsta forma es menos común entre los usuarios R (se recomienda usar `<-`).\n\n## Funciones {.unnumbered}\n\nComo dijimos, los paquetes son básicamente un conjunto de funciones generadas por los autores de los mismos pero el usuario puede crear sus propias funciones.\n\nComponentes de las funciones:\n\nnombre_funcion(argumentos)\n\n-   *Nombre*: Generalmente, el nombre es intuitivo, por ejemplo, `mean` es la función que calcula la media, `round` es la funión que redondea un número.(Como habrán notado R está en inglés)\n\n-   *Argumentos*: Un argumento es un marcador de posición. Cuando se invoca una función, se debe indicar valores a los argumentos. Los argumentos son opcionales; es decir, una función puede no contener argumentos. También los argumentos pueden tener valores por defecto.\n\nAlgunos cálculos basados en funciones matemáticas. Son las mas simples, y no esta función no contienen argumentos. \\[para chequear la info de la función, solo basta con seleccionar todos sus caracteres + F1\\]\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-12_703b5ae05080dda47ad6c8393a4ebb09'}\n\n```{.r .cell-code}\nsqrt(3) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.732051\n```\n:::\n\n```{.r .cell-code}\n# 3^0.5 \n# 3^(1/2)\nlog(10) # logaritmo natural\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.302585\n```\n:::\n\n```{.r .cell-code}\nexp(2.302585)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.999999\n```\n:::\n\n```{.r .cell-code}\n# log(10, base=10)\n```\n:::\n\n\nFunciones básicas pero con argumentos\n\n-   Redondeo\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-13_d394df028e6f764aff11103647e5626a'}\n\n```{.r .cell-code}\nround(4.3478)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nround(4.3478, digits=3)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.348\n```\n:::\n\n```{.r .cell-code}\nround(3.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nround(4.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n::: callout-tip\n1 - Espacios en blanco: podemos o no dejar espacios para que el código se pueda ordenar de forma adecuada y poder entenderse. Lo que no se puede es separar las letras componentes de objetos\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-14_c86bec220eeb19d7b5ecfd2bef792db0'}\n\n```{.r .cell-code}\nplot( pressure )\nplot(pressur e)\n```\n:::\n\n\n2 - Se distinguen las mayúsculas y minúsculas (\"case sensitive\"): para variables en el código, podemos crear diferentes variables con nombres iguales pero alternando mayúsculas y minúsculas.\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-15_0b292a5b0f933589f511cc8acdfeab99'}\n\n```{.r .cell-code}\nPlot(pressure)\n```\n:::\n\n\n3 - Se pueden incluir comentarios: como vimos anteriormente los comentarios se utilizan para añadir información en el código. De paso observamos que\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-16_8b4e187f707da1172b4290ff6508860c'}\n\n```{.r .cell-code}\nplot(pressur e) # da error\n\n# grafico press vs temp\nplot(pressure)\n```\n:::\n\n\n4 - El punto y coma (;) actúa como separador de comandos aún en la misma línea del script!\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-17_15ff87da391a80aab6b2859ec018d226'}\n\n```{.r .cell-code}\npressure; plot(pressure)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   temperature pressure\n1            0   0.0002\n2           20   0.0012\n3           40   0.0060\n4           60   0.0300\n5           80   0.0900\n6          100   0.2700\n7          120   0.7500\n8          140   1.8500\n9          160   4.2000\n10         180   8.8000\n11         200  17.3000\n12         220  32.1000\n13         240  57.0000\n14         260  96.0000\n15         280 157.0000\n16         300 247.0000\n17         320 376.0000\n18         340 558.0000\n19         360 806.0000\n```\n:::\n\n::: {.cell-output-display}\n![](2-sintaxis_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n5 - Los nombres de las variables pueden contener letras, números, guiones bajos y puntos, pero *NO PUEDEN*:\n\n-   comenzar con un número\n-   contener espacios en absoluto\n\nCada uno adopta su propia forma para nombres largos de variables, por ej:\n\n-   puntos.entre.palabras\n-   guiones_bajos_entre_palabras\n-   MayúsculasMinúsculasParaSepararPalabras\n\nNo importa como lo adopten, pero es aconsejable ser consistente.\n:::\n\n## S.O.S. {.unnumbered}\n\n-   En el mismo R: `?sd`; `??sd`; F1 sobre la función\n\n> Googlear: *r generate a sequence of uppercase letters*\n\n-   [Stack Overflow en inglés](https://stackoverflow.com/) / [Stack Overflow en español](https://es.stackoverflow.com) / [RStudio](https://community.rstudio.com/): comunidades altamente activas por los usuarios de R y otros lenguajes de programación.\n\n-   [R Mailing Lists](https://www.r-project.org/mail.html): especificas de cada área de la ciencia.\n\n**¿Cómo hacer una buena pregunta en las comunidades?**\n\n-   Ser conciso pero gentil...\n\n-   Ser reproducible: su código debe correr en cualquier máquina. La comunidad no irá a ayudarle si no pueden reproducir su error (detallar paquetes y versión de R en caso necesario)\n\n## Tablas resumen {#tablas_resumen .unnumbered}\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-18_b120e0e0dfcccf15561bc7097c5d475f'}\n\n:::\n\n::: {.cell hash='2-sintaxis_cache/html/op-arit_b8fa0bef4e28b33b8e41409026f3abae'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 15px; width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Operadores aritméticos</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Operador </th>\n   <th style=\"text-align:left;\"> Detalle </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> `x + y` </td>\n   <td style=\"text-align:left;\"> Suma de x e y </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> `x - y` </td>\n   <td style=\"text-align:left;\"> Resta de x menos y </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> `x * y` </td>\n   <td style=\"text-align:left;\"> Multiplicación </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> `x / y` </td>\n   <td style=\"text-align:left;\"> División de x por y </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> `x %/% y` </td>\n   <td style=\"text-align:left;\"> Parte entera de la división de x por y </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> `x %% y` </td>\n   <td style=\"text-align:left;\"> Resto de la división de x por y </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> `x ^ y` </td>\n   <td style=\"text-align:left;\"> x elevado a y-ésima potencia (equivalente a **) </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n<br><br>\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-19_e1acf40f899556e586fdcb14462791b6'}\n\n:::\n\n::: {.cell hash='2-sintaxis_cache/html/op-logi_29c7e175a168591edb622c124621d9a0'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 15px; width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Operadores lógicos</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Operador </th>\n   <th style=\"text-align:left;\"> Prueba.lógica </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> x &lt; y </td>\n   <td style=\"text-align:left;\"> x menor que y? </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x &lt;= y </td>\n   <td style=\"text-align:left;\"> x menor o igual que y? </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x &gt; y </td>\n   <td style=\"text-align:left;\"> x mayor que y? </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x &gt;= y </td>\n   <td style=\"text-align:left;\"> x mayor o igual que y? </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x == y </td>\n   <td style=\"text-align:left;\"> x igual que y? </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x != y </td>\n   <td style=\"text-align:left;\"> x diferente que y? </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n<br> <br>\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-20_d4a3a08d0e0a8bf774173cced5c53826'}\n\n:::\n\n::: {.cell hash='2-sintaxis_cache/html/matem_7ba38fd782707772e32221ad54ddc4af'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 15px; width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Funciones matemáticas</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Operador </th>\n   <th style=\"text-align:left;\"> Detalle </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> `sqrt(x)` </td>\n   <td style=\"text-align:left;\"> raiz de x </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> `exp(y)` </td>\n   <td style=\"text-align:left;\"> exponencial de y </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> `log(x)` </td>\n   <td style=\"text-align:left;\"> logaritmo natural de x = ln </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> `log10(x)` </td>\n   <td style=\"text-align:left;\"> logaritmo base 10 de x </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> `sum(x)` </td>\n   <td style=\"text-align:left;\"> suma todos los elementos de x </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> `prod(x)` </td>\n   <td style=\"text-align:left;\"> producto de todos los elementos de x </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> `round(x, n)` </td>\n   <td style=\"text-align:left;\"> redondea x a n-digitos </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n<br> <br>\n\n\n::: {.cell hash='2-sintaxis_cache/html/unnamed-chunk-21_14ec2438ffd2d89aa3061f6cd64c71c3'}\n\n:::\n\n::: {.cell hash='2-sintaxis_cache/html/shortcuts_7dce1c103ef0f80f0d126cff3472e0ea'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 15px; width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Algunos atajos comúnmente usados</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Teclas </th>\n   <th style=\"text-align:left;\"> Detalle </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Alt+Shift+K </td>\n   <td style=\"text-align:left;\"> panel de todos los atajos </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ctrl+Z / Ctrl+Shift+Z </td>\n   <td style=\"text-align:left;\"> undo/redo </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Alt+ - </td>\n   <td style=\"text-align:left;\"> &lt;- </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ctrl+r </td>\n   <td style=\"text-align:left;\"> corre la línea/bloque completa de código </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ctrl+l </td>\n   <td style=\"text-align:left;\"> limpia la consola </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ctrl+Shift+c </td>\n   <td style=\"text-align:left;\"> silencia la línea de código </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ctrl+Shift+d </td>\n   <td style=\"text-align:left;\"> duplica la línea de código </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ctrl+i </td>\n   <td style=\"text-align:left;\"> indexa el bloque de código </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}