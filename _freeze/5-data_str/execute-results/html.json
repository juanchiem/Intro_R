{
  "hash": "d6658e43435b74325315e0556072e385",
  "result": {
    "markdown": "\n\n\n# Estructura de datos\n\nAsi como lo vimos para la **naturaleza** de los datos, comprender la **estructura** de los datos en R es de vital importancia.\n\nUn vector es la estructura de datos más básica en R.\n\nVimos los vectores atómicos (un mismo tipo de datos: numericos, caracter...). Las listas son formas especiales de vectores (admiten todo tipo y estructra de datos).\n\n![](fig_2/data_str2.png){width=\"600px\"}\n\n## Data frames {.unnumbered}\n\nUn dataframe es completo con **2 dimensiones**: n_fila x n_columna, donde:\n\n1- Cada columna representa una variable y estas pueden variar en el tipo de dato que contienen.\n\n2- Cada fila debe contener toda la info de la unidad experimental que se está evaluando\n\n3- Cada celda debe tener su observación (en caso de faltar el dato será un NA)\n\n![](fig_2/tibbles.png)\n\nComo hemos visto, hay dataframes contenidos en paquetes de inico automático. Un ejemplo muy usado, que está en el paquete `base` es el dataset \"iris\".\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-2_87fc3623ed2a553657361d1b9bc9940c'}\n\n```{.r .cell-code}\niris # ya activo desde inicio de sesión por default\n?iris # F1\nView(iris) # F2 \nstr(iris)\n```\n:::\n\n\n![](fig_2/iris.png){width=\"400px\"} Exploración de estructura\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-3_3eb27da344040d9d26d75166f9f9dd14'}\n\n```{.r .cell-code}\nstr(iris)\n```\n:::\n\n\nExploración numérica de las variables\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-4_b8628927f2455d68821d7922c586d29a'}\n\n```{.r .cell-code}\nsummary(iris)\n```\n:::\n\n\n::: callout-note\n## Challenge\n\n-   Explore el dataset iris con las siguientes funciones y hagan sus anotaciones segun lo que obtienen sus resultados:\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-5_4b4295af1d1426264f0c11c7fe05f69a'}\n\n```{.r .cell-code}\ndim(); head(); tail(); names() \n```\n:::\n\n:::\n\n## Exportar / importar\n\nImaginen que necesito a iris como archivo excel o csv\n\n{rio}\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-6_5b3b6d9cbb846d05ba3e9dd010606c6b'}\n\n```{.r .cell-code}\nlibrary(rio)\nexport(iris, file=\"data/iris.xlsx\")\niris_from_pc <- import(file=\"data/iris.xlsx\")\n```\n:::\n\n\n## Creación de dataframes a partir de vectores\n\nMuy útil cuando quieren consultar sus dudas y necesitan un dataset de prueba para los foros\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-7_8ee297531a513d7cf713d09933336bb2'}\n\n```{.r .cell-code}\nx <- c(\"A\", \"B\", \"C\")\ny <- c(1, 3, NA)\n\ndat <- data.frame(x = factor(x), y = y)\ndat\nstr(dat)\n```\n:::\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-8_351c1d39eaa922b13317e50c96143c46'}\n\n```{.r .cell-code}\n# tibble::\ndat1 <- tribble(\n      ~X, ~Y,\n     \"A\",  1,\n     \"B\",  3,\n     \"C\",  NA\n     )\ndat1\n```\n:::\n\n\nComparemos dat vs dat1 con\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-9_f4fd08cbce6d569c12c5b9b6674bf7bb'}\n\n```{.r .cell-code}\npacman::p_load(janitor)\ncompare_df_cols(dat, dat1)\n```\n:::\n\n\nOops.. no se llamaban iguales??? R es case sensitive!\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-10_707a1025311431b54f3207b5f6e1afcb'}\n\n```{.r .cell-code}\ndat2 <- clean_names(dat1)  \ncompare_df_cols(dat, dat2)\n```\n:::\n\n\n### Importación desde paquetes específicos de datos\n\n{[agridat](https://kwstat.github.io/agridat/)}\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-11_e976525ca432ec3c2f5461f0ff3bf3b8'}\n\n```{.r .cell-code}\npacman::p_load(agridat)\n# ?agridat\noats <- agridat::yates.oats\n# ?yates.oats\n```\n:::\n\n\n## Exploración de datasets\n\n### Estructura\n\nEs una de las primeras cosas que hacemos post-importación. Esto nos amplia el panorama de los datos.\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-12_220945308d94602b7bc06cbd2a63902a'}\n\n```{.r .cell-code}\nstr(oats)\n```\n:::\n\n\nCuantas celdas hay en cada combinación \"nitro + gen\"\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-13_e6f556e046e013846c7f79e9b1f86760'}\n\n```{.r .cell-code}\noats %>% \n  xtabs(~ nitro + gen, data=.)\n```\n:::\n\n\nCuantas celdas hay en cada combinación \"nitro + gen + block\"\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-14_0a4e477bd6146f14547756f9dc526d1a'}\n\n```{.r .cell-code}\noats %>% \n  xtabs(~ nitro + gen + block, data=.)\n```\n:::\n\n\nMas amigable a la vista:\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-15_aec2adc1ebfb47c334a83c068cbd0aa4'}\n\n```{.r .cell-code}\noats %>% \n  xtabs(~ nitro + gen + block, data=.) %>% \n  ftable()\n```\n:::\n\n\n::: callout-note\n1 - Lo común es tener datos faltantes en las planillas de datos... En este [gist](https://gist.github.com/juanchiem/e2acc96c92825ff26ea2a12b7648b847) simulo un ejemplo para ver el desbalance del dataset. Pueden copiarlo y ejecturalo en sus propias PC´s\n\n2 - Una exploración similar al hecho con `xtabs` puede lograrse con e paquete [janitor](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html#:~:text=%23%3E%20%5B1%5D%20FALSE-,Exploring,-tabyl()%20%2D%20a)\n:::\n\n### Exploración numérica\n\nCon valores absolutos de una variable respuesta `yield`\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-16_e7c07c6d3fbb7cc359dd5b769bb07aed'}\n\n```{.r .cell-code}\nsummary(oats$yield)\n```\n:::\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-17_9fef27e290a31cd119dc345cc68da9e2'}\n\n```{.r .cell-code}\noats %>% \n  xtabs(yield ~ nitro + gen + block, data=.) %>% \n  ftable()\n```\n:::\n\n\n::: callout-note\n## Xtras\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-18_0a74d0d5162f5b55fee138a68b634093'}\n\n```{.r .cell-code}\noats %>% \n  xtabs(yield ~ nitro + gen + block, data=.) %>% \n  prop.table()\n```\n:::\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-19_017a0f4c10e5772c6a97f7c0de428d66'}\n\n```{.r .cell-code}\n# sumas de valores de yield\noats %>% \n  xtabs(yield ~ nitro + gen, data=.) %>% \n  addmargins() \n```\n:::\n\n:::\n\n{skimr}\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-20_14d367b80f12525901376a2cbdc09a74'}\n\n```{.r .cell-code}\nlibrary(skimr)\n\noats %>% \n  skim(yield)\n```\n:::\n\n\nUn poco más en detalle:\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-21_2a391fdd5b3eba73adb42cf189cf954f'}\n\n```{.r .cell-code}\noats %>% \n  group_by(nitro, gen) %>% \n  skim(yield)\n```\n:::\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-22_6ca797bfa2087e55be652d9e012cd1f8'}\n\n```{.r .cell-code}\noats %>% \n  group_by(nitro, gen) %>% \n  skim(yield, grain, straw)\n```\n:::\n\n\n## Listas\n\nUna lista es un tipo especial de vector en el que cada elemento puede ser de un tipo diferente\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-23_386076431ab957d6f59ca5dded30df5d'}\n\n```{.r .cell-code}\nx <- list(a = 1:5, b = c(\"a\", \"b\"), c = TRUE, d=dat)\nx\n```\n:::\n\n\n::: callout-note\n# Acceder a elementos de una lista:\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-24_78ac81fc4ce789bda13922ae4ac9834f'}\n\n```{.r .cell-code}\nx$a       # \nx[1]       # \n#sum(x[1])\nx[[1]]     # \nsum(x[[1]])\nx[\"c\"]     # \n```\n:::\n\n\nMás info [aquí](https://bookdown.org/rdpeng/rprogdatascience/subsetting-r-objects.html#subsetting-lists)\n:::\n\n## Matrices\n\nAdmiten un único tipo de dato y carecen de nombre de columna. Al igual que los dataframes tienen 2 dimensiones: `nrow` x `ncol`\n\n-   Construyamos `my_matrix`\n\n\n::: {.cell hash='5-data_str_cache/html/unnamed-chunk-25_7361388c8fb322dee12270d2428243b4'}\n\n```{.r .cell-code}\nmy_matrix <- matrix(data = c(1,2,3,4,5,6,7,8,9), \n                    nrow=3, ncol=3, \n                    byrow=TRUE)\nmy_matrix\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}