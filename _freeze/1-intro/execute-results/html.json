{
  "hash": "c0a4ccc904136cc0efe2ce9610087b6e",
  "result": {
    "markdown": "# Configuraciones básicas {#config_1}\n\n## Instalación {.unnumbered}\n\n1° [R](https://cran.r-project.org/)\n\n![](fig_1/r.png){fig-align=\"center\" width=\"600px\"}\n\n2° [R Studio](https://www.rstudio.com/products/rstudio/download/) (bajar la versión Free)\n\n![](fig_1/rstudio.png){fig-align=\"center\" width=\"600px\"}\n\nRStudio es un entorno de desarrollo integrado (IDE) para el lenguaje de programación R, o sea, **R Studio** es la interface (o carcasa) por medio de la cual se ejecutan acciones en **R** (motor).\n\nConfiguraciones iniciales (sugeridas). Dirigirse a la sección \"Tools/Global options\"\n\n![](fig_1/config_saving.png){fig-align=\"center\" width=\"500px\"}\n\n## Paquetes de R {.unnumbered}\n\nUn **paquete** es una colección de funciones, datos y código R que se almacenan en una carpeta conforme a una estructura bien definida, fácilmente accesible para R.\n\nLa simple instalación de R trae consigo múltiples paquetes que permiten un funcionamiento básico de importación de datos, ajuste y evaluación de modelos estadísticos y representaciones gráficas. Sin embargo, la enorme potencia de R deriva de su capacidad de incorporar nuevas funciones generadas por su gran comunidad de usuarios.\n\nUn **repositorio** es un lugar donde se alojan los paquetes para que pueda instalarlos desde él. Los repositorios mas populares son:\n\n::: callout-important\n## Repositorios\n\n[CRAN](https://cran.r-project.org/): repositorio oficial. Es una red de servidores web mantenida por la comunidad R en todo el mundo. El Core Team de R lo coordina, y para que un paquete se publique aquí, debe pasar varias pruebas que aseguren el cumplimiento de las políticas de CRAN.\n\n[GITHUB](https://github.com/): probablemente el repositorio más popular para proyectos particulares de código abierto. No es específico de R (sin proceso de revisión asociado).\n\n[Bioconductor](https://www.bioconductor.org/): repositorio destinado a software de código abierto para bioinformática. Como CRAN, tiene sus propios procesos de presentación y revisión, y su comunidad es muy activa y tiene varias conferencias y reuniones al año.\n:::\n\n::: callout-tip\nSe puede consultar la [lista de paquetes disponibles](https://cran.r-project.org/web/packages/available_packages_by_date.html), y en la sección [Task Views](https://cran.r-project.org/web/views/) se explorar los mismos por áreas de aplicación.\n\nLinks para exploración o chequeo de novedades de paquetes:\n\n-   [Rdocumentation](https://www.rdocumentation.org)\n\n-   [METACRAN](https://www.r-pkg.org/)\n\n-   [r weekly](https://rweekly.org/)\n\n-   [r-bloggers](https://www.r-bloggers.com/)\n\n-   [revolution analytics](https://blog.revolutionanalytics.com/)\n\n-   [RStudio blog](https://blog.rstudio.com/categories/packages)\n:::\n\nExisten varias vías de instalación de paquetes:\n\n![](fig_1/install.packages.png){fig-align=\"center\" width=\"500px\"}\n\n-   Vía consola: `install.packages(\"nombre_del_paquete\")` O manualmente en el panel de paquetes.\n\nUna vez instalado, hay que cargar los paquetes que contienen las funciones que vayamos a usar en cada sesión\n\n\n::: {.cell hash='1-intro_cache/html/unnamed-chunk-1_59732112c73e3bbc8077230d04b641eb'}\n\n```{.r .cell-code}\nlibrary(nombre-del-paquete)\n```\n:::\n\n\n![](fig_1/bulb.jpeg)\n\n::: callout-note\n-   Instale el paquete `pacman` y explore su ayuda buscándolo en la lista de paquetes instalados en su PC\n:::\n\n## Proyectos de RStudio {.unnumbered}\n\nUna análisis debe poder ser retomado en cualquier momento pudiendo darse por concluída cuando el trabajo es publicado. Hasta entonces debemos tener rápido acceso a todos los objetos creados en *sesiones* anteriores. Para ello debemos manejarnos siempre bajo *buenas prácticas* de trabajo. Esto nos permitirá entender qué quisimos hacer tiempo atrás, seremos intuitivos para encontrar archivos/objetos, y finalmente crearemos trabajos *reproducibles*...\n\nVarios tipos de archivos serán creados y usados durante una sesión de R:\n\n![](fig_1/workflow_completo.png)\n\nUna forma práctica de administrar todos los objetos de una sesión es por medio del uso de **proyectos de R Studio**.\n\nPara ello vamos a crear un proyecto en algún directorio de nuestra PC llamado \"r_intro_23\"\n\n\n::: {.cell hash='1-intro_cache/html/unnamed-chunk-2_77eb24f91e3998a9e35bd381f28853d2'}\n::: {.cell-output-display}\n```{=html}\n<div class=\"vembedr\">\n<div>\n<iframe src=\"https://www.youtube.com/embed/5brYbPkzm4k\" width=\"533\" height=\"300\" frameborder=\"0\" allowfullscreen=\"\" data-external=\"1\"></iframe>\n</div>\n</div>\n```\n:::\n:::\n\n\nEs aconsejable organizar todos los objetos generados en nuestras sesiones de trabajo en sus carpetas correspondientes.\n\n::: callout-note\n-   Crear las siguientes carpetas: \"plots\", \"data\", \"models\"\n:::\n\nHabiendo creado estas carpetas debemos tener control total de donde se alojan los objetos que vayamos creando. Para ello es importante entender el concepto **directorio de trabajo.** Podemos consultarlo en la consola con la funcion `getwd()`\n\n## Scripts {.unnumbered}\n\n![](fig_1/script_nuevo.png){fig-align=\"center\"}\n\nLos scripts son los archivos donde iremos generando el código a lo largo de nuestra sesión de trabajo. Estos pueden ser de texto plano .R (simil a un .txt) o bien enriquecidos con diferentes formatos de output (.html / .docx / .pdf), los cuales pueden ser .Rmd (R Markdown) o bien el recientemente incluído .qmd (Quarto).\n\nRStudio guardará automáticamente los contenidos del editor cuando salgas del programa, y los cargará automáticamente cuando vuelvas a abrirlo. De todas formas, es clave ir guardando los scripts a medida que vamos escribiéndolos.\n\n::: callout-note\n-   Crear un script \"primer_script\" en sus diferentes formatos .R y .qmd (simil a .Rmd)\n\nEn **primer_script.R**\n\n\\- ejecutemos `plot(pressure)` y guardemos el gráfico resultante en la carpeta correspondiente, con el nombre \"press_vs_temp\"\n\n(ejecutar con botón \"Run\")\n\nEn **primer_script.qmd**\n\nComo dijimos este es uno de los tipos de scripts enriquecidos, es decir que, podemos incluir anotaciones en niveles jerárquicos (tipo word, o mejor dicho [Markdown](https://markdownlivepreview.com/)), es decir Títulos, subtítulos, sub-subtítulos, listas, tablas, imágenes, etc. A modo introductorio nos quedaremos con la distinción entre texto y código. Para este ultimo debemos insertar **chunks** manualmente o vía atajos de teclado \"Ctrl + Alt + i\"\n\n\\- ejecutemos plot(pressure) y guardemos el gráfico resultante en la carpeta correspondiente, con el nombre \"press_vs_temp_2\"\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/vembedr-0.1.5/css/vembedr.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}